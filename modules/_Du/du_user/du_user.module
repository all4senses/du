<?php

/**
 * Implementation of hook_menu().
 */
function du_user_menu() {
  
  $items = array();
    
  $items['comments-fragment'] = array(
    'page callback' => 'du_user_addFragmentForCommentForm_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
    
//  $user_pages = array('blog' => 'blog_post', 'articles' => 'article');
//  foreach ($user_pages as $url_part => $content_type) {
//    $items['user/%user/' . $url_part] = array( 
//      'title' => t("User's $url_part"),
//      'title callback' => 'du_user_getUserTabTitle',
//      'title arguments' => array(1, $url_part),
//      'page callback' => 'du_user_getUserContent',
//      'page arguments' => array(1, $url_part, $content_type),
//      //'access callback' => 'guestbook_menu_access_user_guestbook',
//      //'access arguments' => array(1, 'access user guestbooks'),
//      'access arguments' => array('access content'),
//      'type' => MENU_LOCAL_TASK,
//    );
//  }
    
  return $items;
  
}


/**
 * Process variables for comment.tpl.php.
 *
 * @see comment.tpl.php
 */
function du_user_preprocess_comment(&$variables) {
  $comment = $variables['elements']['#comment'];
  //dpm($comment); 
  //dpm($variables);
  $author_uid = $variables['elements']['#comment']->uid;
  //$node = $variables['elements']['#node'];
  
  
  global $user;
  if (!$user->uid) {
    // Hide links "login or register" for each comment, for anonymous
    unset($variables['elements']['links']['comment']['#links']['comment_forbidden'], $variables['content']['links']['comment']['#links']['comment_forbidden']);
  }
  
  // Get a current comment's social data, if any.
  $query = db_select('du_comment', 'dc');
  $query->fields('dc', array('data'))  
        ->condition('dc.cid', $comment->cid);
  $comment_user_social_data = $query->execute()->fetchField();
  
  if ($comment_user_social_data) {
    $comment_user_social_data = unserialize($comment_user_social_data);
    //dpm($comment_user_social_data);
    $variables['author'] = '<div><span>' . l($comment_user_social_data['full_name'], $comment_user_social_data['identity'], array('external' => TRUE, 'attributes' => array('target' => '_blank'))) . '</span><span> via ' . $comment_user_social_data['provider'] . '</span><span> (' . l('local profile', 'user/' . $author_uid) . ')</span></div>';
    if (isset($comment_user_social_data['photo_local_uri'])) {
      $variables['picture'] = '<div class="comment-avatar">' . theme('image_style', array( 'path' =>  $comment_user_social_data['photo_local_uri'], 'style_name' => 'comment_avatar', 'alt' => $comment_user_social_data['full_name'], 'title' => $comment_user_social_data['full_name'], 'attributes' => array('rel' => 'v:photo'))) . '</div>';
    }
    else {
      // Show the main account picture, if no social picture is presented.
      if (isset($comment->picture->fid)) {
        $picture = file_load($comment->picture->fid);
        if (!empty($picture->uri)) {
          $variables['picture'] = '<div class="comment-avatar">' . theme('image_style', array( 'path' =>  $picture->uri, 'style_name' => 'comment_avatar'/*, 'alt' => $comment_user_social_data['full_name'], 'title' => $comment_user_social_data['full_name']*/, 'attributes' => array('rel' => 'v:photo'))) . '</div>';
        }
      }
      
    }
  }
  else {
    // Show the main account picture, if no social data is presented.
    if (isset($comment->picture->fid)) {
      $picture = file_load($comment->picture->fid);
      if (!empty($picture->uri)) {
        $variables['picture'] = '<div class="comment-avatar">' . theme('image_style', array( 'path' =>  $picture->uri, 'style_name' => 'comment_avatar'/*, 'alt' => $comment_user_social_data['full_name'], 'title' => $comment_user_social_data['full_name']*/, 'attributes' => array('rel' => 'v:photo'))) . '</div>';
      }
    }
  }

  // Original code from comment.module
/*  
  $variables['comment']   = $comment;
  $variables['node']      = $node;
  $variables['author']    = theme('username', array('account' => $comment));
  $variables['created']   = format_date($comment->created);
  $variables['changed']   = format_date($comment->changed);

  $variables['new']       = !empty($comment->new) ? t('new') : '';
  $variables['picture']   = theme_get_setting('toggle_comment_user_picture') ? theme('user_picture', array('account' => $comment)) : '';
  $variables['signature'] = $comment->signature;

  $uri = entity_uri('comment', $comment);
  $uri['options'] += array('attributes' => array('class' => 'permalink', 'rel' => 'bookmark'));

  $variables['title']     = l($comment->subject, $uri['path'], $uri['options']);
  $variables['permalink'] = l(t('Permalink'), $uri['path'], $uri['options']);
  $variables['submitted'] = t('Submitted by !username on !datetime', array('!username' => $variables['author'], '!datetime' => $variables['created']));

  // Preprocess fields.
  field_attach_preprocess('comment', $comment, $variables['elements'], $variables);

  // Helpful $content variable for templates.
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Set status to a string representation of comment->status.
  if (isset($comment->in_preview)) {
    $variables['status'] = 'comment-preview';
  }
  else {
    $variables['status'] = ($comment->status == COMMENT_NOT_PUBLISHED) ? 'comment-unpublished' : 'comment-published';
  }

  // Gather comment classes.
  // 'comment-published' class is not needed, it is either 'comment-preview' or
  // 'comment-unpublished'.
  if ($variables['status'] != 'comment-published') {
    $variables['classes_array'][] = $variables['status'];
  }
  if ($variables['new']) {
    $variables['classes_array'][] = 'comment-new';
  }
  if (!$comment->uid) {
    $variables['classes_array'][] = 'comment-by-anonymous';
  }
  else {
    if ($comment->uid == $variables['node']->uid) {
      $variables['classes_array'][] = 'comment-by-node-author';
    }
    if ($comment->uid == $variables['user']->uid) {
      $variables['classes_array'][] = 'comment-by-viewer';
    }
  }
*/  
}


/**
 * Implements hook form_alter.
 */
function du_user_form_alter(&$form, &$form_state, $form_id) {
  
  //dpm($form_id); dpm($form);
  
  switch($form['#id']) {
    
    case 'user-profile-form':
      
      $form['field_social_loginza']['#access'] = FALSE;
      
      break;
    
    case 'comment-form':
      
        //dpm($form);
        global $user;
        //dpm($user);
        
        if (isset($_SESSION['du_user_loginza_logged_as'])) {
            
            $current_logged_as = $_SESSION['du_user_loginza_logged_as'];

            //dpm($comment_user_social_data);

            if (isset($current_logged_as['photo_local_uri'])) {
              $form['picture'] = array(
                '#markup' => '<div class="comment-avatar">' . theme('image_style', array( 'path' =>  $current_logged_as['photo_local_uri'], 'style_name' => 'comment_avatar', 'alt' => $current_logged_as['name']['full_name'], 'title' => $current_logged_as['name']['full_name'], 'attributes' => array('rel' => 'v:photo'))) . '</div>',
                '#weight' => -5,
              );
            }
            else {
              // Show the main account picture, if no social data is presented.
              if (isset($user->picture) && is_numeric($user->picture)) {
                $picture = file_load($user->picture);
                if (!empty($picture->uri)) {
                  $form['picture'] = array(
                    '#markup' => '<div class="comment-avatar">' . theme('image_style', array( 'path' =>  $picture->uri, 'style_name' => 'comment_avatar'/*, 'alt' => $comment_user_social_data['full_name'], 'title' => $comment_user_social_data['full_name']*/, 'attributes' => array('rel' => 'v:photo'))) . '</div>',
                    '#weight' => -5,
                  );
                }
              }
            }
            
            $form['author']['_author'] = array(
              '#markup' => '<div><span>' . l($current_logged_as['name']['full_name'], $current_logged_as['identity'], array('external' => TRUE, 'attributes' => array('target' => '_blank'))) . '</span><span> via ' . $current_logged_as['provider'] . '</span><span> (' . l('local profile', 'user/' . $user->uid) . ')</span></div>',
            );
            $form['author']['#weight'] = -2;

            
            
        } // End of if (isset($_SESSION['du_user_loginza_logged_as'])) {
        else {
          // Show the main account picture, if no social data is presented.
          if (isset($user->picture)) {
            $picture = file_load($user->picture);
            if (!empty($picture->uri)) {
              $form['picture'] = array(
                '#markup' => '<div class="comment-avatar">' . theme('image_style', array( 'path' =>  $picture->uri, 'style_name' => 'comment_avatar'/*, 'alt' => $comment_user_social_data['full_name'], 'title' => $comment_user_social_data['full_name']*/, 'attributes' => array('rel' => 'v:photo'))) . '</div>',
                '#weight' => -5,
              );
            }
          }
        }
        
        
        
        $form['#submit'][] = 'du_user_submitForm_comment';
        $form['#validate'][] = 'du_user_validateForm_comment';
        
        $form['actions']['submit']['#value'] = 'Комментировать';

        //dpm($form);
        
        break;
  }
  

}


/**
 * Custom validate of article type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function du_user_validateForm_comment(&$form, &$form_state) {
  //dpm($form_state['values']);
  
//  if (isset($_SESSION['du_user_loginza_logged_as'])) {
//    //dpm($_SESSION['du_user_loginza_logged_as']);
//  }
}


/**
 * Custom validate of article type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function du_user_submitForm_comment(&$form, &$form_state) {

  //dpm($form_state);
  //dpm($form_state['values']);
  
  
  
  if (isset($_SESSION['du_user_loginza_logged_as'])) {
    //dpm($_SESSION['du_user_loginza_logged_as']);
    $du_logged_as = $_SESSION['du_user_loginza_logged_as'];
    $comment_remote_acc_data = array(
      'provider' => $du_logged_as['provider'],
      'identity' => $du_logged_as['identity'],
      'uid' => $du_logged_as['uid'],
      'nickname' => empty($du_logged_as['nickname']) ? $du_logged_as['name']['full_name'] : $du_logged_as['nickname'],
      'full_name' => $du_logged_as['name']['full_name'],
      'photo_local_uri' => $du_logged_as['photo_local_uri'],
    );
    
    $result = db_insert('du_comment')
      ->fields(array(
        'cid' => $form_state['values']['cid'],
        'data' => serialize($comment_remote_acc_data),
      ))
      ->execute();
  }
  
}


/**
 * Implements hook_user_delete().
 */
function du_user_user_delete($account) {
//  db_delete('du_users_social')
//    ->condition('uid', $account->uid)
//    ->execute();
}


/**
 * Implements hook_comment_delete().
 */
function du_user_comment_delete($comment) {
  db_delete('du_comment')
    ->condition('cid', $comment->cid)
    ->execute();
}

/**
 * Themed user block for the header.
 */
function du_user_userBlock() {
  
  global $user;
  $out = NULL;
  
  if (!$user->uid) {
    /*
    du_user_initLogin();
    // V1, no need to launch drupal_add_library('system', 'drupal.ajax');
    //$out = ctools_modal_text_button(t('Login'), 'ajax_register/login/nojs', t('Login'), 'ctools-modal-ctools-ajax-register-style');
    // V2, need to launch drupal_add_library('system', 'drupal.ajax') in du_user_initLogin(), but possible to set more params in l()...
    $out = l('Войти', 'ajax_register/login/nojs', array('html' => TRUE, 'attributes' => array('rel' => 'nofollow', 'class' => array('du-login', 'ctools-use-modal', 'ctools-modal-ctools-ajax-register-style'), 'title' => 'Войти')));
    */
  }
  else {
    $out = '<span class="user-profile">Привет, ' . theme('username', array('account' => $user, 'link_path' => 'user/' . $user->uid))  . '!</span><span class="user-logout">' . l('Выйти', 'user/logout', array('query' => array('destination' => ltrim(str_replace('#comment-form', '', $_SERVER['REQUEST_URI']), '/')))) . '</span>';
  }
  
  return $out;
}


/**
 * Themed log in to comment block.
 */
function du_user_loginToComment() {
  
  // modal_forms doesn't work both for loginza and a usual login PLUS doesn't understand GET params in the url
  //echo '<div class="login-to-comment"><a class="ctools-use-modal ctools-modal-modal-popup-medium" href="/modal_forms/nojs/login?destination=' . urlencode(ltrim(str_replace('#comment-form', '', $_SERVER['REQUEST_URI']), '/') . '#comment-form') . '">Modal Login</a></div>';
  
  // Use with ajax_login module.
  du_user_initLogin();
  
  // V1, no need to launch drupal_add_library('system', 'drupal.ajax');
  //$out = '<div class="login-to-comment">' . ctools_modal_text_button(t('Login to comment'), 'ajax_register/login/nojs', t('Login to comment'), 'ctools-modal-ctools-ajax-register-style')  . '</div>';
  // V2, need to launch drupal_add_library('system', 'drupal.ajax') in du_user_initLogin(), but possible to set more params in l()...
  $out = '<div class="login-to-comment">' . l(t('Login to comment'), 'ajax_register/login/nojs', array('html' => TRUE, 'attributes' => array('rel' => 'nofollow', 'class' => array('ctools-use-modal', 'ctools-modal-ctools-ajax-register-style'), 'title' => t('Login to comment'))))  . '</div>';
  
  return $out;
}


/**
 * Add fragment #comment-form to destination if used loginza, popup and was clicked login-to-comment link.
 */
function du_user_addFragmentForCommentForm_ajax() {
  
  $from = check_plain($_POST['from']);
  
  switch ($from) {
    
    case 'login-to-comment':
        $_SESSION['du_user_loginza_login_destination']['fragment'] = 'comment-form';
    case 'login':
        // Prevent a module login_destination from redefining the destination based on the $GLOBALS['destination'] param.
        unset($GLOBALS['destination']);
        // Tell a hook function du_user_drupal_goto_alter to set the right destination params for logging in via loginza.
        $_SESSION['du_user_loginza_login'] = TRUE;
        break;
  }
  
  drupal_json_output(array('status' => TRUE));
}


/**
 * Prepare login data for poopup and loginza.
 */
function du_user_initLogin() {
  
  global $du_login_initiated;
  
  if (!$du_login_initiated) {
    
    $du_login_initiated = TRUE;
    
    // ajax_login module functionality for popup ajax login.
    _ajax_register_include_modal();
    
    
    // V1, no need to launch drupal_add_library('system', 'drupal.ajax');
    //$out = ctools_modal_text_button(t('Login'), 'ajax_register/login/nojs', t('Login'), 'ctools-modal-ctools-ajax-register-style');
    // V2, need to launch drupal_add_library('system', 'drupal.ajax') in du_user_initLogin(), but possible to set more params in l()...
    //$out = l(t('Login'), 'ajax_register/login/nojs', array('html' => TRUE, 'attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-ctools-ajax-register-style'), 'title' => t('Login'))));
    
    // So, comment if plan to use without ctools_modal_text_button()
    drupal_add_library('system', 'drupal.ajax');
    
    // Prepare the destination param for log in via loginza. 
    $query = $_GET;
    unset($query['q']);
    $_SESSION['du_user_loginza_login_destination'] = array(
      'destination' => ltrim(url($_GET['q']), '/'),
      'query' => $query,
      //'fragment' => 'comment-form',
    );
    
    $path_to_custom_js = drupal_get_path('module', 'du_user') . '/js/';
    drupal_add_js($path_to_custom_js . 'du_loginToCommentLink.js');
    
  }
}


/**
 * Action upon login via loginza, refine data.
 */
function du_user_loginza_data_refine(&$data, $account, $registration = FALSE) {
  
  // Get a provider du_pid (existing before or just set).
  $query = db_select('du_social_providers', 'sp');
  $query->fields('sp', array('du_pid'))  
        ->condition('sp.loginza_pid', $data['provider']);
  
  if(!$du_provider_id = $query->execute()->fetchField()) {
    // Add a new provider to a list of providers (if does not exist).
    db_merge('du_social_providers')
        ->key(array('loginza_pid' => $data['provider']))
        //->fields(array('data' => NULL))
        ->execute();

    // Get a provider du_pid (existing before or just set).
    $query = db_select('du_social_providers', 'sp');
    $query->fields('sp', array('du_pid'))  
          ->condition('sp.loginza_pid', $data['provider']);
    $du_provider_id = $query->execute()->fetchField();
  }
  
  
  
  // Get the current user's accounts.
  if (isset($account->field_social_loginza['und'][0]['value']) && $account->field_social_loginza['und'][0]['value']) {
    $user_social_data = unserialize($account->field_social_loginza['und'][0]['value']);
//    dpm('saved social 1');
//    dpm($user_social_data);
//    dpm('saved social 2');
  }
  
  
  
  // Add a new (or replace existing) account data by a provider name (loginza_pid).
  // Before adding we append an inner du_pid provider id to a source loginza array.
  $data['du_pid'] = $du_provider_id;
  
  // Get user's avatar, if it's not pulled yet.
  //if (empty($user_social_data['accounts'][$data['provider']]['photo_local'])) {
  if (empty($user_social_data[$data['provider']]['photo_local_url'])) {
    du_user_loginza_getUserAvatar($data, $account, $registration);
  }
  else {
    $data['photo_local_url'] = $user_social_data[$data['provider']]['photo_local_url'];
    $data['photo_local_uri'] = $user_social_data[$data['provider']]['photo_local_uri'];
  }
  
  if (!isset($data['name']['full_name'])) {
    $data['name']['full_name'] = du_user_loginza_fullname($data);
  }
  
  // Set a full_name if it's not set.
  
  $user_social_data[$data['provider']] = $data;
  
  // Put updated user social accounts data arrat back to the db.
  du_misc_fieldSave('social_loginza', $account->uid, serialize($user_social_data), 'user');
  
  $_SESSION['du_user_loginza_logged_as'] = $data;
  
  //dpm('in du_user_loginza_data');
  //dpm($data);
  //dpm($account);
}


/**
 * Action upon login via loginza.
 */
function du_user_loginza_data($data, $account) {
  // Prevent a module login_destination from redefining the destination based on the $GLOBALS['destination'] param.
  unset($GLOBALS['destination']);
  // Tell a hook function du_user_drupal_goto_alter to set the right destination params for logging in via loginza.
  $_SESSION['du_user_loginza_login'] = TRUE;
  
  // It could be initialized in hook_user_register_alter().
  if(!isset($_SESSION['du_user_loginza_logged_as'])) {
    du_user_loginza_data_refine($data, $account);
  }
  
}


/**
 * Implements hook_drupal_goto_alter
 */
function du_user_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  // Makes sure a user will be redirected to the source page after login via loginza, initiated in a popup window by ajax_login module.
  // A destination (source) page should define a destination params in $_SESSION['du_user_loginza_login_destination'],
  // and the param $_SESSION['du_user_loginza_login'] should be set in hook_loginza_data, informing us that we are in the process of logtinza login.
  if (isset($_SESSION['du_user_loginza_login'])) {
    unset($_SESSION['du_user_loginza_login']);
    if (is_array($_SESSION['du_user_loginza_login_destination'])) {
      $path = $_SESSION['du_user_loginza_login_destination']['destination'];
      $options['query'] = $_SESSION['du_user_loginza_login_destination']['query'];
      $options['fragment'] = @$_SESSION['du_user_loginza_login_destination']['fragment'];
    }
    else {
      $path = $_SESSION['du_user_loginza_login_destination'];
      $options = NULL;
    }
  }
  
}


/**
 * Returns user's content.
 */
function du_user_getUserTabTitle($account, $content_title){
  return t("@name's " . $content_title, array('@name' => format_username($account)));
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function du_user_form_user_register_form_alter(&$form, &$form_state) {
    
  // Set up the right nickname (username) for user registered via loginza
  // !!!!!!!!!!!!!!!!!!!!!  MUST have weight bigger then loginza in a system table
  
  //dpm('reg form start');
  //dpm($form);
  //dpm('reg form finish');
  
  if (isset($_SESSION['loginza']['data'])) {
    $data = $_SESSION['loginza']['data'];
    
    // It's necessary in hook_user_insert() because $_SESSION['loginza']['data'] will be cleared by loginza before that time.
    $_SESSION['du_user_loginza_initial_data'] = $_SESSION['loginza']['data'];
   
    
    $form['account']['name']['#default_value'] = du_user_loginza_username($data); //strtolower(str_replace(' ', '.', $data['name']['full_name'])); //_loginza_username($data);
    $form['field_first_name']['und'][0]['value']['#default_value'] = @$data['name']['first_name'];
    $form['field_last_name']['und'][0]['value']['#default_value'] = @$data['name']['last_name'];
    
    // Set a full name.
    if (!empty($data['name']['full_name'])) {
      $full_name = $data['name']['full_name'];
    }
    else {
      $name_parts = array();
      if (!empty($data['name']['first_name'])) {
        $name_parts[] = $data['name']['first_name'];
      }
      if (!empty($data['name']['last_name'])) {
        $name_parts[] = $data['name']['last_name'];
      }
      $full_name = trim(implode(' ', $name_parts));
    }
    $form['field_full_name']['und'][0]['value']['#default_value'] = $full_name;
 }

}


/**
 * Implements hook_user_presave().
 */
function du_user_user_presave(&$edit, $account, $category) {
  
  // Set a full_name if it's empty.
  if(!isset($edit['field_full_name']['und'][0]['value']) || !$edit['field_full_name']['und'][0]['value']) {
    if( (isset($edit['field_first_name']['und'][0]['value']) && $edit['field_first_name']['und'][0]['value']) || (isset($edit['field_last_name']['und'][0]['value']) && $edit['field_last_name']['und'][0]['value'])) {
      $edit['field_full_name']['und'][0]['value'] = trim(@$edit['field_first_name']['und'][0]['value'] . ' ' . @$edit['field_last_name']['und'][0]['value']);
    }
  }
  
}


/**
 * Get user's remote social avatar.
 * $registration = TRUE means it's a registration and we have to set a remote picture as a main user picture.
 */
function du_user_loginza_getUserAvatar(&$loginza_data, &$account, $registration = FALSE) {
  
  if (!isset($loginza_data['photo'])) {
    return FALSE;
  }
  
  $success = FALSE;
  
  $file_default_scheme = file_default_scheme();
  $user_picture_path = variable_get('user_picture_path', 'avatars');
  $picture_directory_uri =  $file_default_scheme . '://' . $user_picture_path;
  
  if($picture_result = drupal_http_request($loginza_data['photo'])) {
    if(isset($picture_result->headers['content-type']) && strpos($picture_result->headers['content-type'], 'mage/') && !$picture_ext = str_replace('image/', '', $picture_result->headers['content-type'])) {
      $picture_ext = 'jpeg';
    }
    $picture_filepath = '/s/u' . $account->uid . '-s' . $loginza_data['du_pid'] . '.' . $picture_ext;
    // Build local file path url to return to save it in user's loginza data.
    $picture_path_url = variable_get('file_' . $file_default_scheme . '_path', '/f') . '/' . $user_picture_path . $picture_filepath;
  }
  else {
    return FALSE;
  }
  
  $picture_path_uri = file_stream_wrapper_uri_normalize($picture_directory_uri . $picture_filepath);
          
  if($registration && file_prepare_directory($picture_directory_uri, FILE_CREATE_DIRECTORY)){
    
      //$picture_path = file_stream_wrapper_uri_normalize($picture_directory . '/picture-' . $account->uid . '-' . REQUEST_TIME . '.jpg');
      
      $picture_file = file_save_data($picture_result->data, $picture_path_uri, FILE_EXISTS_REPLACE);

      // Check to make sure the picture isn't too large for the site settings.
      $max_dimensions = variable_get('user_picture_dimensions', '85x85');
      file_validate_image_resolution($picture_file, $max_dimensions);

      // Update the user record.
      $picture_file->uid = $account->uid;
      $picture_file = file_save($picture_file);
      file_usage_add($picture_file, 'user', 'user', $account->uid);
  
      db_update('users')
        ->fields(array(
        'picture' => $picture_file->fid,
        ))
        ->condition('uid', $account->uid)
        ->execute();

      //$account['picture'] = $picture_file->fid;
      
      $success = TRUE;
      
  } // End of if($picture_result = drupal_http_request($loginza_data['photo']) && file_prepare_directory($picture_directory_uri, FILE_CREATE_DIRECTORY)){
  elseif(!$registration) {
    $file_local_abs = DRUPAL_ROOT . '/' . $picture_path_url;
    if (!du_misc_curl_file_from_remote_site_likeBrowser($loginza_data['photo'], $file_local_abs)) {
      $success = TRUE;
    }
  }

  if ($success) {
    $loginza_data['photo_local_url'] = $picture_path_url;
  }
}


/**
 * Implements hook_user_insert().
 */
function du_user_user_insert(&$edit, $account) {
  
  
  // Retrieve the user's picture from remote social network.

  // $_SESSION['du_user_loginza_initial_data'] is set in user_register_folr_alter because before that time the source var from Loginza are cleared by :oginza.
  if (isset($_SESSION['du_user_loginza_initial_data'])) {
    
    $loginza_data = $_SESSION['du_user_loginza_initial_data'];
   
    du_user_loginza_data_refine($loginza_data, $account, TRUE); // $registration = TRUE means it's a registration and we have to set remote picture as a main user picture
    
    
  } // End of if (isset($_SESSION['du_user_loginza_logged_as'])) {

}


/**
 * Get a full_name from loginza data. Corrected version of du_user_loginza_username($data)
 */
function du_user_loginza_fullname($data) {
  $name = '';
  if (isset($data['name'])) {
    if (!empty($data['name']['full_name'])) {
      $name = $data['name']['full_name'];
    }
    else {
      $name_parts = array();
      if (!empty($data['name']['first_name'])) {
        $name_parts[] = $data['name']['first_name'];
      }
      if (!empty($data['name']['last_name'])) {
        $name_parts[] = $data['name']['last_name'];
      }
      $name = trim(implode(' ', $name_parts));
    }
  }

  if (empty($name)) {
    $name = empty($data['nickname']) ? variable_get('loginza_default_name', 'user@du') : $data['nickname'];
  }

  return $name;
}


/**
 * Corrected replace for _loginza_username($data).
 */
function du_user_loginza_username($data) {
  $name = '';
  if (isset($data['name'])) {
    if (!empty($data['name']['full_name'])) {
      $name = $data['name']['full_name'];
    }
    else {
      $name_parts = array();
      if (!empty($data['name']['first_name'])) {
        $name_parts[] = $data['name']['first_name'];
      }
      if (!empty($data['name']['last_name'])) {
        $name_parts[] = $data['name']['last_name'];
      }
      $name = trim(implode(' ', $name_parts));
    }
  }

  if (empty($name)) {
    $name = empty($data['nickname']) ? variable_get('loginza_default_name', 'user@du') : $data['nickname'];
  }

  // check duplicate user name
  $base_name = $name;
  $count = NULL;
  while (TRUE) {
    $uid = db_query("SELECT uid FROM {users} WHERE name = :name", array(':name' => $name))->fetchField();
    if (empty($uid)) break;
    $name = $base_name . ' ' . ++$count;
  }

  return $name;
}


/**
 * Socialite social buttons.
 */
function du_user_getSocialiteButtons($url = NULL, $title = NULL) {

  if (!$url) {
    $url = 'http://' . $_SERVER['SERVER_NAME'] . ($_GET['q'] == 'home' ? '' : $_SERVER['REQUEST_URI']);
  }
  
  //drupal_add_js('sites/all/libraries/jquery.plugins/socialite/socialite.min.js');
  drupal_add_js('sites/all/libraries/jquery.plugins/socialite/socialite.js');
  
  $path_to_custom_js = drupal_get_path('module', 'du_user') . '/js/';
  drupal_add_js($path_to_custom_js . 'du_addSocialite.js');
  
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="horizontal" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?url=' . $url . '" class="socialite googleplus-one" data-size="medium" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?u=' . $url . '&amp;t=' . $title . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?mini=true&amp;url=' . $url . '&amp;title=' . $title . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="right" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
      <li><a href="http://vkontakte.ru/share.php?url=' . $url . '" class="socialite vkontakte-like" data-type="mini" data-text="Vkon" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on VK</span></a></li>
      <li><a href="http://connect.mail.ru/share?url=' . $url . '" class="socialite mailru-like mrc__plugin_uber_like_button" data-mrc-config=' . '"' . "{'nt' : '1', 'cm' : '3', 'ck' : '3', 'sz' : '20', 'st' : '2', 'tp' : 'combo'}" . '"' .  ' data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Mail.ru</span></a></li>  
		</ul>
  ';
  
  return $out;
}
